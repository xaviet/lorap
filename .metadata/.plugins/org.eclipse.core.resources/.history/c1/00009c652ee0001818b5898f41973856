/*
 * task_heartbeat.c
 *
 *  Created on: Nov 4, 2018
 *      Author: mose
 */

#include "task_heartbeat.h"
#include "config.h"
#include "global.h"

void heartbeat_init()
{

}

void heartBeat_run()
{
  switch(globalV.heartBeatStatesMachine.msgId)
  {
    case Edefault:
      heartBeatStates_default();
      break;
    case EheartBeatTx:
      heartBeatStates_tx();
      break;
    case EheartBeatRxing:
      heartBeatStates_rxing();
      break;
    case EheartBeatRxDone:
      heartBeatStates_rxDone();
      break;
    case EheartBeatDelay:
      heartBeatStates_delay();
      break;
    default:
      break;
  }
}

void heartBeatStates_delay()
{
  if(delta_ticket(globalV.heartBeatStatesMachine.startTicket, globalV.msTicket) >= HEARTBEAT_INTERVAL)
   {
    globalV.heartBeatStatesMachine.msgId = EheartBeatTx;
   }
  else
  {
    globalV.heartBeatStatesMachine.msgId = EheartBeatDelay;
  }
}

void heartBeatStates_rxDone()
{
  debug_print("heartBeatStates_rxDone");
  globalV.extiStates.w5500Int = OFF;
  globalV.heartBeatStatesMachine.startTicket = globalV.msTicket;
  globalV.heartBeatStatesMachine.msgId = EheartBeatDelay;
}

void heartBeatStates_rxing()
{
  if(delta_ticket(globalV.heartBeatStatesMachine.startTicket, globalV.msTicket) >= HEARTBEAT_RX_TIMEOUT)
   {
    debug_print("heartBeatStates_rxing timeout");
    globalV.heartBeatStatesMachine.startTicket = globalV.msTicket;
     globalV.heartBeatStatesMachine.msgId = EheartBeatDelay;
   }
  else
  {
    globalV.heartBeatStatesMachine.msgId = EheartBeatRxing;
  }
}

void heartBeatStates_tx()
{
  w5500_write_socket_buffer(LORA_NS_SOCKET, (u8*)&globalV.loraLoginChannelConfig, globalV.loraLoginChannelConfig.msgHead.length);
  globalV.heartBeatStatesMachine.startTicket = globalV.msTicket;
  globalV.heartBeatStatesMachine.msgId = EheartBeatRxing;
}

void heartBeatStates_default()
{
  globalV.heartBeatStatesMachine.msgId = EheartBeatTx;
}

u8 config_msg_format(struct SconfigMsg* msg, u8 vCrc8, u8 idCheck)
{
  if(msg->msgHead.alignMark != ALIGNMARK)
  {
    debug_print("config_msg_format alignMark error");
    return(FALSE);
  }
//  if(msg->length != sizeof(struct SconfigMsg))
//  {
//    debug_print("config_msg_format length error");
//    return(FALSE);
//  }
  if(vCrc8 != crc8((u8*)msg, msg->msgHead.length - 1))
  {
    debug_print("msg_format crc8 error");
    return(FALSE);
  }
  if(idCheck && !stringCmp(globalV.loraLoginChannelConfig.msgHead.gwId, msg->msgHead.gwId, 4))
  {
    usart_send_u8_array(globalV.loraLoginChannelConfig.msgHead.gwId, 4);
    usart_send_u8_array(msg->msgHead.gwId, 4);
    debug_print("msg_format gwId error");
    return(FALSE);
  }
  return(TRUE);
}
